
<div class="hist form-mine" style="width:450px; height:450px"></div>

<script>
    $.ajax({
        type: "POST",
        contentType: "application/json; charset=utf-8",
        url: '/chart/<%= local_assigns[:analysis]%>',
        dataType: 'json',
        async: true,
        data: "{}",
        success: function (data) {

            var raw_data = data
            which_chart(data);

        }
    });
    function which_chart(raw_data) {
        console.log('char type: <%= local_assigns[:chart_type]%>');
        var div_name = "div.hist";

        if ('<%= local_assigns[:chart_type]%>' == 'bars') {
            var chart_data = [];
            for (var i = 0; i < raw_data.length; i++) {
                console.log(raw_data[i]);
                chart_data.push(raw_data[i]["id"]);
            }

            draw_histogram(div_name, chart_data);
        } else if ('<%= local_assigns[:chart_type]%>' == 'donuts') {
            var chart_data = {};
            for (var i = 0; i < raw_data.length; i++) {
                console.log(raw_data[i]);
                if (raw_data[i]["institution"] in chart_data) {
                    chart_data[raw_data[i]["institution"]] += 1;
                } else {
                    chart_data[raw_data[i]["institution"]] = 1;

                }
            }
            console.log(chart_data);
            draw_donut(div_name, chart_data);
        };
    };
    function draw_histogram(reference, data) {
        $(reference).empty()
        var margin = { top: 10, right: 30, bottom: 30, left: 40 },
            width = 460 - margin.left - margin.right,
            height = 400 - margin.top - margin.bottom;

        // append the svg object to the body of the page
        var svg = d3.select(reference)
            .append("svg")
            .attr("width", width + margin.left + margin.right)
            .attr("height", height + margin.top + margin.bottom)
            .append("g")
            .attr("transform",
                "translate(" + margin.left + "," + margin.top + ")");

        // get the data
        // X axis: scale and draw:
        var x = d3.scaleLinear()
            .domain([0, d3.max(data, function (d) { return +d })+1])
            .range([0, width]);

        svg.append("g")
            .attr("transform", "translate(0," + height + ")")
            .call(d3.axisBottom(x));

        // set the parameters for the histogram
        var histogram = d3.histogram()
            .value(function (d) { return d; })   // I need to give the vector of value
            .domain(x.domain())  // then the domain of the graphic
            .thresholds(x.ticks(70)); // then the numbers of bins

        // And apply this function to data to get the bins
        var bins = histogram(data);

        // Y axis: scale and draw:
        var y = d3.scaleLinear()
            .range([height, 0]);
        y.domain([0, d3.max(bins, function (d) { return d.length; })]);   // d3.hist has to be called before the Y axis obviously
        svg.append("g")
            .call(d3.axisLeft(y));

        // append the bar rectangles to the svg element
        svg.selectAll("rect")
            .data(bins)
            .enter()
            .append("rect")
            .attr("x", 1)
            .attr("transform", function (d) { return "translate(" + x(d.x0) + "," + y(d.length) + ")"; })
            .attr("width", function (d) { return x(d.x1) - x(d.x0); })
            .attr("height", function (d) { return height - y(d.length); })
            .style("fill", "#69b3a2")

    };

    function draw_donut(reference, data) {
        // set the dimensions and margins of the graph
        div_dims = d3.select(reference).node().getBoundingClientRect()
        var width = div_dims["width"]
        height = div_dims["height"]
        margin = 40


        // The radius of the pieplot is half the width or half the height (smallest one). I subtract a bit of margin.
        var radius = Math.min(width, height) / 2 - margin

        // append the svg object to the div called 'my_dataviz'
        var svg = d3.select(reference)
            .append("svg")
            .attr("width", width)
            .attr("height", height)
            .append("g")
            .attr("transform", "translate(" + width / 2 + "," + height / 2 + ")");


        // set the color scale
        var color = d3.scaleOrdinal()
            .domain(Object.keys(data))
            .range(d3.schemeDark2);
        

        // Compute the position of each group on the pie:
        var pie = d3.pie()
            .sort(null) // Do not sort group by size
            .value(function (d) { return d.value; })
        var data_ready = pie(d3.entries(data))

        // The arc generator
        var arc = d3.arc()
            .innerRadius(radius * 0.5)         // This is the size of the donut hole
            .outerRadius(radius * 0.8)

        // Another arc that won't be drawn. Just for labels positioning
        var outerArc = d3.arc()
            .innerRadius(radius * 0.9)
            .outerRadius(radius * 0.9)

        // Build the pie chart: Basically, each part of the pie is a path that we build using the arc function.
        svg
            .selectAll('allSlices')
            .data(data_ready)
            .enter()
            .append('path')
            .attr('d', arc)
            .attr('fill', function (d) { return (color(d.data.key)) })
            .attr("stroke", "white")
            .style("stroke-width", "2px")
            .style("opacity", 0.7)

        // Add the polylines between chart and labels:
        svg
            .selectAll('allPolylines')
            .data(data_ready)
            .enter()
            .append('polyline')
            .attr("stroke", "black")
            .style("fill", "none")
            .attr("stroke-width", 1)
            .attr('points', function (d) {
                var posA = arc.centroid(d) // line insertion in the slice
                var posB = outerArc.centroid(d) // line break: we use the other arc generator that has been built only for that
                var posC = outerArc.centroid(d); // Label position = almost the same as posB
                var midangle = d.startAngle + (d.endAngle - d.startAngle) / 2 // we need the angle to see if the X position will be at the extreme right or extreme left
                posC[0] = radius * 0.95 * (midangle < Math.PI ? 1 : -1); // multiply by 1 or -1 to put it on the right or on the left
                return [posA, posB, posC]
            })

        // Add the polylines between chart and labels:
        svg
            .selectAll('allLabels')
            .data(data_ready)
            .enter()
            .append('text')
            .text(function (d) { console.log(d.data.key); return d.data.key })
            .attr('transform', function (d) {
                var pos = outerArc.centroid(d);
                var midangle = d.startAngle + (d.endAngle - d.startAngle) / 2
                pos[0] = radius * 0.99 * (midangle < Math.PI ? 1 : -1);
                return 'translate(' + pos + ')';
            })
            .style('text-anchor', function (d) {
                var midangle = d.startAngle + (d.endAngle - d.startAngle) / 2
                return (midangle < Math.PI ? 'start' : 'end')
            })

    }


    //A better idom for binding with resize is to debounce
    var debounce = function (fn, timeout) {
        var timeoutID = -1;
        return function () {
            if (timeoutID > -1) {
                window.clearTimeout(timeoutID);
            }
            timeoutID = window.setTimeout(fn, timeout);
        }
    };

    var debounced_draw = debounce(function () {
        which_chart();
    }, 125);

    $(window).resize(debounced_draw);

</script>