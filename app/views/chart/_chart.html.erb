<div id="content" class="hist form-mine w-100" style="width:100%; margin:0px"></div>

<script>

    var raw_data = <%= @data.to_json.html_safe %>;
    console.log(raw_data);
    var div_name = "div.hist";

    function render_chart() {
        <% if @type == 'bars' %>
        
            var chart_data = [];
        for (var i = 0; i < raw_data.length; i++) {
            console.log(raw_data[i]);
            chart_data.push(raw_data[i]["id"]);
        }

        draw_histogram(div_name, chart_data);
        <% elsif @type == 'dount2' %>

            var chart_data = {};
        for (var i = 0; i < raw_data.length; i++) {
            console.log(raw_data[i]);
            if (raw_data[i]["institution"] in chart_data) {
                chart_data[raw_data[i]["species"]] += 1;
            } else {
                chart_data[raw_data[i]["species"]] = 1;

            }
        }
        console.log(chart_data);
        draw_donut(div_name, chart_data);
        <% elsif @type == 'dount' %>

            var chart_data = {};
        for (var i = 0; i < raw_data.length; i++) {
            console.log(raw_data[i]);
            if (raw_data[i]["institution"] in chart_data) {
                chart_data[raw_data[i]["institution"]] += 1;
            } else {
                chart_data[raw_data[i]["institution"]] = 1;

            }
        }
        console.log(chart_data);
        draw_donut(div_name, chart_data);

        <% elsif @type == 'lines' %>
        
            var chart_data = {};
        for (var i = 0; i < raw_data.length; i++) {
            console.log(raw_data[i]);
            if (raw_data[i]["institution"] in chart_data) {
                chart_data[raw_data[i]["institution"]] += 1;
            } else {
                chart_data[raw_data[i]["institution"]] = 1;

            }
        }
        console.log(chart_data);
        draw_lines(div_name, chart_data);
        <% else %>
            console.log("error");
        <% end %>
    };
    render_chart();

    function draw_histogram(reference, data) {
        $(reference).empty()
        var div_dims = d3.select(reference).node().getBoundingClientRect();
        var margin = { top: 10, right: 30, bottom: 30, left: 40 },
            width = div_dims["width"] - margin.left - margin.right,
            height = Math.max(div_dims["height"], div_dims["width"] / 2) - margin.top - margin.bottom;
        // var width = div_dims["width"];
        // var height = 500;
        // var margin = 40;
        console.log(div_dims);

        console.log(div_dims["width"]);
        console.log(div_dims["height"]);


        console.log(width);
        console.log(height);
        // console.log(he);


        // append the svg object to the body of the page
        var svg = d3.select(reference)
            .append("svg")
            .attr("width", width + margin.left + margin.right)
            .attr("height", height + margin.top + margin.bottom)
            .append("g")
            .attr("transform",
                "translate(" + margin.left + "," + margin.top + ")");

        // get the data
        // X axis: scale and draw:
        var x = d3.scaleLinear()
            .domain([0, d3.max(data, function (d) {
                return +d
            }) + 1])
            .range([0, width]);

        svg.append("g")
            .attr("transform", "translate(0," + height + ")")
            .call(d3.axisBottom(x));

        // set the parameters for the histogram
        var histogram = d3.histogram()
            .value(function (d) {
                return d;
            })   // I need to give the vector of value
            .domain(x.domain())  // then the domain of the graphic
            .thresholds(x.ticks(70)); // then the numbers of bins

        // And apply this function to data to get the bins
        var bins = histogram(data);

        // Y axis: scale and draw:
        var y = d3.scaleLinear()
            .range([height, 0]);
        y.domain([0, d3.max(bins, function (d) {
            return d.length;
        })]);   // d3.hist has to be called before the Y axis obviously
        svg.append("g")
            .call(d3.axisLeft(y));

        // append the bar rectangles to the svg element
        svg.selectAll("rect")
            .data(bins)
            .enter()
            .append("rect")
            .attr("x", 1)
            .attr("transform", function (d) {
                return "translate(" + x(d.x0) + "," + y(d.length) + ")";
            })
            .attr("width", function (d) {
                return x(d.x1) - x(d.x0);
            })
            .attr("height", function (d) {
                return height - y(d.length);
            })
            .style("fill", "#69b3a2")

    };

    function draw_donut(reference, data) {
        // set the dimensions and margins of the graph
        $(reference).empty()
        var div_dims = d3.select(reference).node().getBoundingClientRect();
        var margin = 10,
            width = div_dims["width"] - 2 * margin,
            height = Math.max(div_dims["height"], div_dims["width"] / 2) - 2 * margin;



        // The radius of the pieplot is half the width or half the height (smallest one). I subtract a bit of margin.
        var radius = Math.min(width, height) / 2 - margin

        // append the svg object to the div called 'my_dataviz'
        var svg = d3.select(reference)
            .append("svg")
            .attr("width", width)
            .attr("height", height)
            .append("g")
            .attr("transform", "translate(" + width / 2 + "," + height / 2 + ")");


        // set the color scale
        var color = d3.scaleOrdinal()
            .domain(Object.keys(data))
            .range(d3.schemeDark2);


        // Compute the position of each group on the pie:
        var pie = d3.pie()
            .sort(null) // Do not sort group by size
            .value(function (d) {
                return d.value;
            })
        var data_ready = pie(d3.entries(data))

        // The arc generator
        var arc = d3.arc()
            .innerRadius(radius * 0.5)         // This is the size of the donut hole
            .outerRadius(radius * 0.8)

        // Another arc that won't be drawn. Just for labels positioning
        var outerArc = d3.arc()
            .innerRadius(radius * 0.9)
            .outerRadius(radius * 0.9)

        // Build the pie chart: Basically, each part of the pie is a path that we build using the arc function.
        svg
            .selectAll('allSlices')
            .data(data_ready)
            .enter()
            .append('path')
            .attr('d', arc)
            .attr('fill', function (d) {
                return (color(d.data.key))
            })
            .attr("stroke", "white")
            .style("stroke-width", "2px")
            .style("opacity", 0.7)

        // Add the polylines between chart and labels:
        svg
            .selectAll('allPolylines')
            .data(data_ready)
            .enter()
            .append('polyline')
            .attr("stroke", "black")
            .style("fill", "none")
            .attr("stroke-width", 1)
            .attr('points', function (d) {
                var posA = arc.centroid(d) // line insertion in the slice
                var posB = outerArc.centroid(d) // line break: we use the other arc generator that has been built only for that
                var posC = outerArc.centroid(d); // Label position = almost the same as posB
                var midangle = d.startAngle + (d.endAngle - d.startAngle) / 2 // we need the angle to see if the X position will be at the extreme right or extreme left
                posC[0] = radius * 0.95 * (midangle < Math.PI ? 1 : -1); // multiply by 1 or -1 to put it on the right or on the left
                return [posA, posB, posC]
            })

        // Add the polylines between chart and labels:
        svg
            .selectAll('allLabels')
            .data(data_ready)
            .enter()
            .append('text')
            .text(function (d) {
                console.log(d.data.key);
                return d.data.key
            })
            .attr('transform', function (d) {
                var pos = outerArc.centroid(d);
                var midangle = d.startAngle + (d.endAngle - d.startAngle) / 2
                pos[0] = radius * 0.99 * (midangle < Math.PI ? 1 : -1);
                return 'translate(' + pos + ')';
            })
            .style('text-anchor', function (d) {
                var midangle = d.startAngle + (d.endAngle - d.startAngle) / 2
                return (midangle < Math.PI ? 'start' : 'end')
            })

    };

    function draw_lines(reference, data) {
        var div_dims = d3.select(reference).node().getBoundingClientRect();
        var margin = { top: 10, right: 30, bottom: 30, left: 40 },
            width = div_dims["width"] - margin.left - margin.right,
            height = Math.max(div_dims["height"], div_dims["width"] / 2) - margin.top - margin.bottom;


        // append the svg object to the body of the page
        var svg = d3.select(reference)
            .append("svg")
            .attr("width", width + margin.left + margin.right)
            .attr("height", height + margin.top + margin.bottom)
            .append("g")
            .attr("transform",
                "translate(" + margin.left + "," + margin.top + ")");

        //Read the data
        d3.csv("https://raw.githubusercontent.com/holtzy/data_to_viz/master/Example_dataset/3_TwoNumOrdered_comma.csv",

            // When reading the csv, I must format variables:
            function (d) {
                return { date: d3.timeParse("%Y-%m-%d")(d.date), value: d.value }
            },

            // Now I can use this dataset:
            function (data) {

                // Add X axis --> it is a date format
                var x = d3.scaleTime()
                    .domain(d3.extent(data, function (d) { return d.date; }))
                    .range([0, width]);
                xAxis = svg.append("g")
                    .attr("transform", "translate(0," + height + ")")
                    .call(d3.axisBottom(x));

                // Add Y axis
                var y = d3.scaleLinear()
                    .domain([0, d3.max(data, function (d) { return +d.value; })])
                    .range([height, 0]);
                yAxis = svg.append("g")
                    .call(d3.axisLeft(y));

                // Add a clipPath: everything out of this area won't be drawn.
                var clip = svg.append("defs").append("svg:clipPath")
                    .attr("id", "clip")
                    .append("svg:rect")
                    .attr("width", width)
                    .attr("height", height)
                    .attr("x", 0)
                    .attr("y", 0);

                // Add brushing
                var brush = d3.brushX()                   // Add the brush feature using the d3.brush function
                    .extent([[0, 0], [width, height]])  // initialise the brush area: start at 0,0 and finishes at width,height: it means I select the whole graph area
                    .on("end", updateChart)               // Each time the brush selection changes, trigger the 'updateChart' function

                // Create the line variable: where both the line and the brush take place
                var line = svg.append('g')
                    .attr("clip-path", "url(#clip)")

                // Add the line
                line.append("path")
                    .datum(data)
                    .attr("class", "line")  // I add the class line to be able to modify this line later on.
                    .attr("fill", "none")
                    .attr("stroke", "black")
                    .attr("stroke-width", 2.0)
                    .attr("d", d3.line()
                        .x(function (d) { return x(d.date) })
                        .y(function (d) { return y(d.value) })
                    )

                // Add the brushing
                line
                    .append("g")
                    .attr("class", "brush")
                    .call(brush);

                // A function that set idleTimeOut to null
                var idleTimeout
                function idled() { idleTimeout = null; }

                // A function that update the chart for given boundaries
                function updateChart() {

                    // What are the selected boundaries?
                    extent = d3.event.selection

                    // If no selection, back to initial coordinate. Otherwise, update X axis domain
                    if (!extent) {
                        if (!idleTimeout) return idleTimeout = setTimeout(idled, 350); // This allows to wait a little bit
                        x.domain([4, 8])
                    } else {
                        x.domain([x.invert(extent[0]), x.invert(extent[1])])
                        line.select(".brush").call(brush.move, null) // This remove the grey brush area as soon as the selection has been done
                    }

                    // Update axis and line position
                    xAxis.transition().duration(1000).call(d3.axisBottom(x))
                    line
                        .select('.line')
                        .transition()
                        .duration(1000)
                        .attr("d", d3.line()
                            .x(function (d) { return x(d.date) })
                            .y(function (d) { return y(d.value) })
                        )
                }

                // If user double click, reinitialize the chart
                svg.on("dblclick", function () {
                    x.domain(d3.extent(data, function (d) { return d.date; }))
                    xAxis.transition().call(d3.axisBottom(x))
                    line
                        .select('.line')
                        .transition()
                        .attr("d", d3.line()
                            .x(function (d) { return x(d.date) })
                            .y(function (d) { return y(d.value) })
                        )
                });

            })

    };

<% if @type == 'bars' %>
<% elsif @type == 'dount' %>
<% elsif @type == 'lines' %>
<% end %>

    //A better idom for binding with resize is to debounce
    var debounce = function (fn, timeout) {
        var timeoutID = -1;
        return function () {
            if (timeoutID > -1) {
                window.clearTimeout(timeoutID);
            }
            timeoutID = window.setTimeout(fn, timeout);
        }
    };

    var debounced_draw = debounce(function () {
        render_chart()
    }, 125);

    $(window).resize(debounced_draw);


</script>