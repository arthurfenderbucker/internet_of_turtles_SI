<div style='width: 100%;'>
    <div id="map" style='width: 100%; height: 80vh;'></div>
</div>

<div id="turtle_info">


</div>

<script type="text/javascript">

    map = new google.maps.Map(document.getElementById('map'), {
        center: { lat: -10.000, lng: -43.000 },
        zoom: 3,
        mapTypeId: 'hybrid',

        fullscreenControl: false,
        streetViewControl: false,
        mapTypeControl: false,
        rotateControl: false,
        fullscreenControl: false,
        scaleControl: false,

        zoomControl: true,
        zoomControlOptions: {
            position: google.maps.ControlPosition.RIGHT_CENTER
        },
        streetViewControl: false,
        streetViewControlOptions: {
            position: google.maps.ControlPosition.RIGHT_TOP
        }
    });


    var iconBase = 'https://maps.google.com/mapfiles/kml/shapes/';
    var icons = {
        turtle: {
                url: "<%= (image_url('icon_turtle.svg')) %> ",
                scaledSize: new google.maps.Size(20, 20),
                anchor: new google.maps.Point(10, 10)

        },
        ping: {
            url: "<%=(image_url('yellow_dot.svg'))%>",
            scaledSize: new google.maps.Size(10, 10),
            anchor: new google.maps.Point(5, 5)
        }
    };
    var selected_turtle = 0;

    var path_coordinates = [];

    var turtleMovement = new google.maps.Polyline({
        path: [],
        geodesic: true,
        strokeColor: '#FFFF00',
        strokeOpacity: 1.0,
        strokeWeight: 2
    });
    var ping_markers = [];
    var infowindow = new google.maps.InfoWindow({
        content: ""
    });

    // Create markers.
    var turtle_features = [
        <% @turtles.each do | turtle | %>
        <% next unless turtle.turtle_data.last != nil%>
        {
            position: new google.maps.LatLng(<%= turtle.turtle_data.last.latitude %>, <%= turtle.turtle_data.last.longitude %>),
            info_url: "<%= turtle_info_path(turtle.id) %>",
            id: "<%= turtle.id %>",
            last_ping: "<%= turtle.turtle_data.last.created_at %>",
            type: 'turtle'

        },
        <% end %>];
    console.log(turtle_features);
    function show_turtle_info(turtle_url) {
        $.get(turtle_url,
            function (data) {
                $("div#turtle_info").html(data);
            }, 'html'
        );

    };
    function show_turtle_movements(turtle_url) {
        $.ajax({
            url: turtle_url,
            contentType: 'application/json; charset=utf-8',
            type: "GET",
            dataType: 'JSON',
            success: function (json) {
                var coords = json.map(turtle_ping => {
                    return {
                        'lat': turtle_ping.latitude,
                        'lng': turtle_ping.longitude
                    }
                });
                // console.log(coords);

                ping_markers = json.map(turtle_ping => {
                    var marker = new google.maps.Marker({
                        position: new google.maps.LatLng(turtle_ping.latitude, turtle_ping.longitude),
                        icon: icons["ping"],
                        map: map
                    });
                    marker.addListener('click', function () {
                        infowindow.setContent(turtle_ping.created_at);
                        infowindow.open(map, marker);
                    });
                    return marker;
                });
                console.log(ping_markers );
                turtleMovement.setPath(coords);
            }
        });
    }


    var markers = turtle_features.map(function (feature, i) {
        var marker = new google.maps.Marker({
            position: feature.position,
            icon: icons[feature.type],
            map: map
        });
        marker.addListener('click', function () {
            infowindow.setContent(feature.last_ping);
            infowindow.open(map, marker);
            ping_markers.forEach(function(ping_marker){
                ping_marker.setMap(null);
            });

            if (selected_turtle != feature.id) {
                show_turtle_info(feature.info_url);
                show_turtle_movements(feature.info_url);
                turtleMovement.setMap(map);
                selected_turtle = feature.id;
            } else {
                selected_turtle = 0;
                infowindow.close();
                turtleMovement.setMap(null);
                $("div#turtle_info").html("");
            }
        });
        return marker;
    });

    //set style options for marker clusters (these are the default styles)
    mcOptions = {
        styles: [{
            text_color: 'white',
            height: 53,
            url: "<%=(image_url('turtle_cluster2.png'))%>",
            width: 53
        },
        ]
    }

    //init clusterer with your options
    var mc = new MarkerClusterer(map, markers, mcOptions);

</script>